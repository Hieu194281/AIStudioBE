package vn.dasvision.template.service;

import io.jsonwebtoken.lang.Assert;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;
import vn.dasvision.template.api.requestbody.UpdateUserRequest;
import vn.dasvision.template.api.requestbody.UserRequest;
import vn.dasvision.template.persistence.dto.User;

import static org.junit.jupiter.api.Assertions.assertNull;

@Transactional
@SpringBootTest
public class UserServiceTests {
    @Autowired
    UserServiceImpl userService;

    @Test
    void testUserService(){
        try {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



            System.out.println("=========Start test userService.getListUser !!!!===============");
            Assert.notNull( userService.getListUser(0, 0, null), "Test get list user role successfully");
            Assert.notNull( userService.getListUser(2, 1, null), "Test get list user role successfully");
            Assert.notNull( userService.getListUser(0, 0, "a"), "Test get list user role successfully");
            Assert.notNull( userService.getListUser(2, 1, "a"), "Test get list user role successfully");


            System.out.println("=========End test userService.getListUser !!!!===============");
            System.out.println("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////");


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            System.out.println("=========Start test userService.getUserById !!!!===============");
            Assert.notNull( userService.getUserById(0), "Test get list user role successfully");
            Assert.notNull( userService.getUserById(1), "Test get list user role successfully");
            Assert.notNull( userService.getUserById(31), "Test get list user role successfully");

            System.out.println("=========End test userService.getUserById !!!!===============");
            System.out.println("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////");




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            System.out.println("=========Start test userService.addUser !!!!===============");

            Assert.notNull( userService.addUser(new UserRequest(null,null, null, null, null,null, null,null)), "Test get list user role successfully");
            System.out.println("========= null all success ===============");

            Assert.notNull( userService.addUser(new UserRequest("a","a", "a", "a", "a","29-11-2001", "a","1234567890")), "Test get list user role successfully");
            Assert.notNull( userService.addUser(new UserRequest("","a", "a", "a", "a","sadaa", "a","1121212121211")), "Test get list user role successfully");
            System.out.println("========= invalidate all success ===============");

            Assert.notNull( userService.addUser(new UserRequest("1","asss@gmail.com", null, "vu", "vu",null, null,null)), "Test get list user role successfully");
            System.out.println("========= add success ===============");

            Assert.notNull( userService.addUser(new UserRequest("1","asss@gmail.com", null, "vu", "vu","20-11-1991", null,null)), "Test get list user role successfully");
            System.out.println("========= exit email ===============");

            Assert.notNull( userService.addUser(new UserRequest("999","asss@gmail.com", null, "vu", "vu",null, null,null)), "Test get list user role successfully");
            System.out.println("========= not exit role id ===============");

            Assert.notNull( userService.addUser(new UserRequest(null,null, null, null, null,null, null,null)), "Test get list user role successfully");

            System.out.println("=========End test userService.addUser !!!!===============");
            System.out.println("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////");


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            System.out.println("=========Start test userService.changePassword !!!!===============");
            Assert.notNull( userService.changePassword("a@gmail.com", "If^gvw09", "24^0lSS"), "Test get list user role successfully");
            Assert.notNull( userService.changePassword("b@gmail.com", "24^0lSSE", "24^0lasSS"), "Test get list user role successfully");
            Assert.notNull( userService.changePassword("ccc@gmail.com", "24^0lSSE", "24^0lSSE1"), "Test get list user role successfully");
            Assert.notNull( userService.changePassword("trypass@gmai.com", "E%8d(1(d11", "24^0lSSE1"), "Test get list user role successfully");
            Assert.notNull( userService.changePassword("trypass@gmai.com", "E%8d(1(d1", "24^0lSSE1"), "Test get list user role successfully");

//            E%8d(1(d

            System.out.println("=========End test userService.changePassword !!!!===============");
            System.out.println("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////");


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            System.out.println("=========Start test userService.login !!!!===============");
            Assert.notNull( userService.login("a@gmail.com", "If^gvw09"), "Test get list user role successfully");
            Assert.notNull( userService.login("b@gmail.com", "24^0lSSE"), "Test get list user role successfully");
//            Assert.notNull( userService.login(null, "24^0lSSE"), "Test get list user role successfully");
            Assert.notNull( userService.login("a@gmail.comas", "2^0lSSE"), "Test get list user role successfully");
            Assert.notNull( userService.login("a@gmail.comas", "lSSE"), "Test get list user role successfully");
            Assert.notNull( userService.login("ba@gmail.com", "Os%MqoR4"), "Test get list user role successfully");

            System.out.println("=========End test userService.login !!!!===============");
            System.out.println("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////");



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            System.out.println("=========Start test userService.logout !!!!===============");
//            Assert.notNull( userService.logout("eyJhbGciOiJIUzUxMiJ9.eyJyb2xlIjoidXNlciIsImlkIjoyOSwiZW1haWwiOiJhQGdtYWlsLmNvbSIsImlhdCI6MTY3OTI4MDk4MCwiZXhwIjoxNjc5MzMwOTgwfQ.1awd8VBGohqfRQQKd4pQQS706hheem3CRjmKBTbQri625pxrGATJLC0Qf3NPn51FYkJu6aZ0lxZ0U2izROfj-A"), "Test get list user role successfully");
            System.out.println("=========End test userService.logout !!!!===============");
            System.out.println("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////");

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



            System.out.println("=========Start test userService.resetPassword !!!!===============");
            Assert.notNull( userService.resetPassword(0), "Test get list user role successfully");
            Assert.notNull( userService.resetPassword(31), "Test get list user role successfully");
            Assert.notNull( userService.resetPassword(29), "Test get list user role successfully");

            System.out.println("=========End test userService.resertPassword !!!!===============");
            System.out.println("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////");


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            System.out.println("=========Start test userService.updateUser !!!!===============");
            // not update any
            Assert.notNull( userService.updateUser(new UpdateUserRequest(), "29"), "Test get list user role successfully");
            // check pdf
            Assert.notNull( userService.updateUser(new UpdateUserRequest(null,null,"UEsDBAoAAAAAAD0XGVUAAAAAAAAAAAAAAAAfAAkAamF2YS1zcHJpbmctYm9vdC10cmFpbmluZy1tYWluL1VUBQABNuUGY1BLAwQKAAAACAA9FxlVQ9pN/gkBAADnAQAAKQAJAGphdmEtc3ByaW5nLWJvb3QtdHJhaW5pbmctbWFpbi8uZ2l0aWdub3JlVVQFAAE25QZjZZHPasMwDMbvfoqU3AKxL3uB/SmsY4xBxq5DcbTUxbGNrbT07afE7tbRi6zvsyR+sp+3r+9yGoQcIwwWRT8bOyixyVKdIoSAUWXZFikPEMWmaVSKWk1gnOL80llswkRXtvVjEqKu66r76Co+hYRAXyM6jEDIANpCSgFoL+Q3aPLxnEWI/oCahExIZByPkSlETh4Q3CIo3bUa9J7hmeSW69r8pVrMv7KIyc9RY1K8nzUayHgnz5PNyDtHaK15qXZP2/sMbwYE0UhzSkvkQo4hCj/TLcE/80Kwmuv0N6R1lXWwcn1ZWPGSR34atXjlFdVguHsxSiJd35avysM+u+rRD5ghj0lzzjfiB1BLAwQKAAAACAA9FxlVbnNI2fQAAAChAQAAKAAJAGphdmEtc3ByaW5nLWJvb3QtdHJhaW5pbmctbWFpbi9SRUFETUUubWRVVAUAATblBmN1Tz1PxDAM3fMrLHXlerq1Y+8kBIIBDokRhdRtI5o4Z7sH/fekHwMC4cV+tt97dgEnK1cvniLc26uFc2IfO6iJFF7Y+piRMUXx/xQYE4lX4mleLOAZL6NnNGa3kCo4HOb6/PRQweOU082a4JX4o8bo+pV3i6qznqhlxcZAJt2FRKwg7PYh2+0ZhUZ2KHtZTnnT7YpSLgMobcr5mynvgaOQRkWe/Y+MVhFaPyDYlAbvrOa3yykM0DKF380Sv2xIw/LHsbexwywXW9+Bj38EsnMeRnS6Gp/qCoyBHDto3qEn0R8w2oAL2lqjzCeudbIin8SNWeMbUEsDBAoAAAAIAD0XGVX0QoAIpgIAABoIAAArAAkAamF2YS1zcHJpbmctYm9vdC10cmFpbmluZy1tYWluL2J1aWxkLmdyYWRsZVVUBQABNuUGY61VTU/cMBA9b35FbgEJOyQt0EbqASGqtqoKKu2p6sFJvMFL7HFtZ2GF+O8de7NfsKGsqFbKZpyZN88z42fddo1QNr6PRqKOEzANtdoI1YwNk/wWzA0tAVwST7mxAlSc5PSIZnky9xfQu9Oaa65qrqoZkUyxhkuu1sMyeohh9Pv51/PTq/M+fMKmLIkeoqgCNRZNZ5hD58CmAqlFyy9UO/PmiN85xLcfDciYKQUuuF4aqLi1YKLRg8dpDHQ6/hAnU0VrZqfCJ0+iBQv8cOh5kKtvp5dXny5+JJGFzlT8DLMhYCla4WbeLcuS/8YKnX4lLTRvJzntmSS/fZKcZicUExmuwQoHRvCQRbIpV2dYP8PavX2/r2V1ew8hdRsqHPIN962YLxL/TqxjxnFDbnmZvBKiZo6RSV1WA0ByVqJlF8MRcPo1sgWvyCn+ECtNX0LLYnHx44JZb5IKDMeubTQpxGsDE165FmQJN8X8D5OZTjkhez85s3/aIjwRSCn0B0PmAzra0tpnkR237vNr6usBnsGZdEo4fGrhixcssrCO6DtfSl/L+No5bYs0lVO1nLEZxfqkmEaMWeXSFa0aqifNDOepWCePXslBrHAHuLxcIoDzybQgncCv/ZAX/tQf0+OnM7KAXcrHGO4eo+ISsbesabjJNzBz+j7MyuswHzMdQB3scpHRDAu9Q6XRoA1A0/IKak4nFkfWhnTp2vvgvobDV7vcXFxvQ+Z1ZveZ2BzVdFgKNHvp4f2HpmiGYnCy6wQzzaprTlFkG683QWzT8Hx2pLeFraq5MNeHJAj2QYySjqYGuRtNyYxgdUm9cqa9ETSGVK1AhltquE53PXxFcwvOBuk3eOMdIU+8RhyzN5b6uHovCRqz72+TzvIvP1FDLlvmxmBkuHP+AlBLAwQKAAAAAAA9FxlVAAAAAAAAAAAAAAAAJgAJAGphdmEtc3ByaW5nLWJvb3QtdHJhaW5pbmctbWFpbi9ncmFkbGUvVVQFAAE25QZjUEsDBAoAAAAAAD0XGVUAAAAAAAAAAAAAAAAuAAkAamF2YS1zcHJpbmctYm9vdC10cmFpbmluZy1tYWluL2dyYWRsZS93cmFwcGVyL1VUBQABNuUGY1BLAwQKAAAACAA9FxlVnx83mZfVAABU7QAAQAAJAGphdmEtc3ByaW5nLWJvb3QtdHJhaW5pbmctbWFpbi9ncmFkbGUvd3JhcHBlci9ncmFkbGUtd3JhcHBlci5qYXJVVAUAATblBmOUvAVwHE2yNSoLLGZmZkYLLWZmhhEzM0uWRsxMFjODxczMzMxoMf++/7fvxX679963ryMypronO6q76mSeU1kToyANBg4DAgIFBQICIgjyXwcoyF8H9B+TFVURpJeUE2MEA1H4m6NN7Xc+gT8t/j+G9s+OsoJykmKiyioMsmK3suNjMtL0DDPw0vQ0k+NT9UpM86zbB7/H6YclJ2QnaCXpvsCcAo2T9wu0qJsxyYv2C2iCMMkx0AowbhxvHL/8S4///Gjgf8zO0ezfnuqffWD/4WPmCDC2NvlfXVH/7urmCLC3N3H8t1sUHFvTyv+MCj0GCAjNf3+L+P89Vf/rTBZgYctgZA1wcsrSgHRHG0L/gMxqKF7Ic8wLI8kW5QkjkWHW6EUihibzJhJAEdkGiWiIR7i0HdgkIJfbdS6OFwvHL8akdICRy0yoAe2Xc/O8WjjpSNjlfDZ7dG6tI/J5/s7WdHs4QfvpdbsJF/P9ZtoExGqABGJKpRZiSil3d8XRPRrvZ/m2B40UWQv4lLp9SiDm040Qvx4ZNKPaDUr7fIyTb7tMz5iqiuQgTbsQQ6fSQLm9Xk+56rjDSLXijVa7XHiHNsLj8M49zeUALlr7TMy35xtTdFA7xWs1dBf3jHCtdt0eHhW6JNDLAR709aOhNpWga1v0q57332cdju7ZeJtXQ5BvzTl5aIjDz5Cq3lCIZU9MSjRizEW7JARKTFXbpDQcO/HhPPYrMbSOfeLv7ho9pL9vjRxv9mi+B8gn7yg/NQROSUyKF0rE80dMjezc0nT6M5Y9oXRWbNPSuO6Wgzq5nVtZwDYRnlzYbrkV5Fupv8ZV8fFl6bZBgO7svVB3MJcNheC02dCiEFpipK5YDqI2EjQ9ns0UECPRLW8ubs7NYtvajQ2XytWfX1xYX40oYB4qwHIkWUf3kz5gBOQpvPt+0S/nErBB35FYX86KxGetIHjXmI8VS3/3dO6yFd3nlb1b6YsL6q6rsYBnR9B8EZg357U5ISUFLjT3pRHYm7XdSWTKPRu+oaeicqsc1+XrNgGpqleNNAVkpTdLtUEPGMT7rdcJwnB06AlrZRhWkUmJqUHDTdJdtYPayUlbk5ieFFNszPzYZpctBw09vQW424Z2cnNmfVl9wwP3gfDPuK1TFNakjZT5NNICZ/0cowrjyDy9Tx4lzndwxhekXiYk8nTEju/Sq3Hme2S6Lyejp4W1+KaRvskiE7nEFueg1VRBWaKX5RLKq1NY75JrZJ8ojB9gLTooDw+s78Cz6MBqZs6XboHvcCI0+zb2tqmOZiy7v3J5tXx1ymeTTWjL4dBrnvNl5C2MKdh3gRvLbdUJVoFU9KPErtlRay9pkUb70KYm67b17GWUKDaD266s2ITmTXSQoWkbjZt+hinfd8m6AqthK+Bl8TdBlZvkrObuDUtdMyTLt+xvveV6BLXp0VkIeUUa0or3FJUJp2sQN3B+gmoLgyYD8w3EwIu5CXA6A+xQPt/mRozT5SAMqIa1TuoqpZS2ywCHNUC7nTWYzvydticCDzkYtGwZMThtg41Phw82b0L+6WvhN4meGPY38BjmCIqEemF5ONZQHN/wbOqnFqD",null,null,null,null, null), "29"), "Test get list user role successfully");
            // check img an
            Assert.notNull( userService.updateUser(new UpdateUserRequest("a","b@gmail.com","","vu","vu",null,null, null), "29"), "Test get list user role successfully");
            Assert.notNull( userService.updateUser(new UpdateUserRequest("a","a@gmail.com","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","vu","vu",null,null, null), "29"), "Test get list user role successfully");

            // input error
            Assert.notNull( userService.updateUser(new UpdateUserRequest("A","baszxgmail.com",null,null,null,"10-01-200a2",null, "111"), ""), "Test get list user role successfully");
            Assert.notNull( userService.updateUser(new UpdateUserRequest("","baszx@gmail.com",null,"","","10-01-1asd",null, null), null), "Test get list user role successfully");
            Assert.notNull( userService.updateUser(new UpdateUserRequest(null,"baszx@gmail.com",null,"vu","vu","",null, "a"), "31"), "Test get list user role successfully");
            // db
            Assert.notNull( userService.updateUser(new UpdateUserRequest("9999","b@gmail.com",null,"vu","vu",null,null, null), "9999"), "Test get list user role successfully");
            Assert.notNull( userService.updateUser(new UpdateUserRequest("9999","b@gmail.com",null,"vu","vu",null,null, null), "31"), "Test get list user role successfully");
            Assert.notNull( userService.updateUser(new UpdateUserRequest("1","a@gmail.com",null,"vu","vu","10-01-2002",null, ""), "31"), "Test get list user role successfully");
            Assert.notNull( userService.updateUser(new UpdateUserRequest("1","ax@gmail.com",null,"vu","vu","10-01-2002",null, null), "31"), "Test get list user role successfully");
            Assert.notNull( userService.updateUser(new UpdateUserRequest("1","a@gmail.com",null,"vu","vu","10-01-2002",null, null), "31"), "Test get list user role successfully");

//            Assert.notNull( userService.updateUser(new UpdateUserRequest("1",null,null,null,null,null,null, null), "29"), "Test get list user role successfully");

//            Assert.notNull( userService.updateUser(new UpdateUserRequest(null,null,null,null,null,null,null, null), "29"), "Test get list user role successfully");


            System.out.println("=========End test userService.updateUser !!!!===============");
            System.out.println("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////");


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            System.out.println("=========Start test userService.deleteUser !!!!===============");
            Assert.notNull( userService.deleteUser(0), "Test get list user role successfully");
            Assert.notNull( userService.deleteUser(31), "Test get list user role successfully");
            System.out.println("=========End test userService.deleteUser !!!!===============");
            System.out.println("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////");


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        } catch (Exception e){
            assertNull("Fail", "Test Fail");
        }

    }

}
